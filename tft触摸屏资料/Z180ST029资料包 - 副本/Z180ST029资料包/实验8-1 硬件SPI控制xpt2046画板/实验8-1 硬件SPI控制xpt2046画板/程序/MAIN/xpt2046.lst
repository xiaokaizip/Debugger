C51 COMPILER V9.54   XPT2046                                                               09/23/2018 00:10:22 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE XPT2046
OBJECT MODULE PLACED IN .\xpt2046.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\HARDWARE\xpt2046\xpt2046.c LARGE OPTIMIZE(8,SPEED) BROWSE NOINTVECTOR
                    - INCDIR(..\delay;..\tft;..\GUI;..\HARDWARE\xpt2046;..\HARDWARE\spi;C:\Keil_v5\C51\INC\STC) DEBUG OBJECTEXTEND PRINT(.\xp
                    -t2046.lst) TABS(2) OBJECT(.\xpt2046.obj)

line level    source

   1          
   2           
   3          #include "stc15f2k60s2.h"
   4          #include "math.h"
   5          #include "xpt2046.h"
   6          #include "delay.h"
   7          #include "spi.h"
   8          #include "gui.h"
   9          #include "tft.h"
  10          
  11          
  12          u8 i2t[8];         //读24c02中 触摸校准参数 临时转换调用数组
  13          
  14          
  15          //触摸屏校准参数
  16          struct T_i T_i2c=
  17          {
  18           354,      
  19           423,
  20           -6,
  21            -5,
  22          };
  23          
  24          
  25          
  26          
  27          
  28          //SPI总线法 读取XPT2046数据
  29          //采集触摸时xpt输出的物理坐标 x y  
  30          //此函数没有转换成LCD的实际坐标 
  31          //为校准函数做读取
  32          //返回 xpt2046ad.x  物理x坐标
  33          //     xpt2046ad.y  物理y坐标
  34          //     xpt2046ad.flag 采集成功标志
  35          struct TFT_Pointer xpt2046ad()                                     
  36          {
  37   1       struct TFT_Pointer result;
  38   1       u8   ax[8];
  39   1       u16 x1,y1;
  40   1       u16 x2,y2;
  41   1      
  42   1       result.x=0;
  43   1       result.y=0;
  44   1       result.flag=0;
  45   1       
  46   1      #define ERR_RANGE 5 //误差范围 
  47   1        
  48   1       if(AD7843_isClick==0)
  49   1       {   
  50   2        delay1ms(1);
  51   2        if(AD7843_isClick==0)
  52   2        {
  53   3      
C51 COMPILER V9.54   XPT2046                                                               09/23/2018 00:10:22 PAGE 2   

  54   3          AD7843_CS=0;    //开片选
  55   3          
  56   3          
  57   3        SPI_Speed(2);   //降低 SPI通讯速度 使触摸芯片放回数据更稳定
  58   3         
  59   3         /*这里采用16时钟周期采集  因为 此触摸功能采用的是SPI总线
  60   3           而SPI功能是只能8位传输  XPT2046的AD分辨率为12位  
  61   3         这样8位的SPI接收是不行的
  62   3         所以 根据XPT2046手册中 16时钟周期 时序图 可以看出
  63   3         发送采集数据  接收一次SPI数据后 在发送空功能的SPI数据  就会把剩下的部分接收到
  64   3         这样先接收的 是低字节数据  第二次接收的是高字节数据  移位后 便是12位的AD值   
  65   3         */
  66   3         ax[0]=SPI_SendByte(0x90);  //送控制字10010000即用差分方式读X坐标，舍弃读取的数据
  67   3         ax[0]=SPI_SendByte(0x00);  //发送任意数据（最高位不能为1，和2046命令冲突），接收X高字节
  68   3         ax[1]=SPI_SendByte(0xD0);  //送控制字11010000即用差分方式读Y坐标，接收X低字节
  69   3         ax[2]=SPI_SendByte(0x00);  //发送任意数据（同上），接收Y高字节
  70   3         ax[3]=SPI_SendByte(0x90);  //送控制字10010000 （第二次）读X坐标，接收Y低字节
  71   3         ax[4]=SPI_SendByte(0x00);  //发送任意数据（同上），接收X高字节
  72   3         ax[5]=SPI_SendByte(0xD0);  //送控制字11010000  （第二次）读Y坐标，接收X低字节
  73   3         ax[6]=SPI_SendByte(0x00);  //发送任意数据（同上)，接收Y高字节
  74   3         ax[7]=SPI_SendByte(0x90);  //送控制字10010000  （第三次）读X坐标，接收Y低字节
  75   3      
  76   3                      //提取两次采集值
  77   3         y1=(ax[0]<<5)|(ax[1]>>3);
  78   3         y2=(ax[4]<<5)|(ax[5]>>3);
  79   3         x1=(ax[2]<<5)|(ax[3]>>3);
  80   3         x2=(ax[6]<<5)|(ax[7]>>3);
  81   3      
  82   3      if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-ERR_RANGE内
  83   3          &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
  84   3         {
  85   4          result.flag=1;      //打开标志位
  86   4        result.x=(x1+x2)/2;
  87   4        result.y=(y1+y2)/2;
  88   4         }
  89   3         else result.flag=0;
  90   3      
  91   3         SPI_Speed(0);    //调整SPI速度为最高
  92   3         
  93   3         AD7843_CS=1;     //关片选
  94   3      
  95   3         
  96   3        }
  97   2       } 
  98   1      
  99   1       return result;
 100   1      }
 101          
 102          
 103          
 104          
 105          //触摸数据转换屏实际坐标函数体
 106          //返回 result.x坐标 result.y坐标 
 107          struct TFT_Pointer TFT_Cm()                                     
 108          {
 109   1       u16 a,b;       //临时变量
 110   1       struct TFT_Pointer result;
 111   1      
 112   1       result=xpt2046ad();   //读取AD值
 113   1      
 114   1      //触摸板X Y
 115   1         a=result.x;
C51 COMPILER V9.54   XPT2046                                                               09/23/2018 00:10:22 PAGE 3   

 116   1         b=result.y;
 117   1      /* 触摸屏计算公式
 118   1         lcdx=xa*tpx+xb;
 119   1         lcdy=ya*tpy+yb;
 120   1         lcdx,lcdy为屏坐标  tpx,tpy为触屏板值 xa,ya为比例因子  xb,yb为偏移量
 121   1      
 122   1         计算方法 
 123   1         在屏幕上指定lcdx,lcdy位置画出十字图形 分别画在屏幕上的4个角位置
 124   1         用触摸笔分别点击 得到其中的触摸值
 125   1         根据上面的公式 计算  xa,ya  xb,yb  这样就能使得触摸板和屏幕校准
 126   1        */
 127   1           //无校准功能  
 128   1      //     result.x=0.065894*a-16;      //将得到的AD值带入公式 计算lcd屏的x y坐标 
 129   1      //     result.y=0.084031*b-14;
 130   1           
 131   1      //     result.x=0.0802*a-41;      //将得到的AD值带入公式 计算lcd屏的x y坐标 
 132   1      //     result.y=0.0993*b-42;
 133   1          //加校准功能  
 134   1           result.x=((float)T_i2c.xi/10000)*a+T_i2c.a;      //将得到的AD值带入公式 计算lcd屏的x y坐标 
 135   1           result.y=((float)T_i2c.yi/10000)*b+T_i2c.b;
 136   1       return result;               //返回坐标值
 137   1      }
 138          
 139          
 140          
 141          
 142          
 143          
 144          
 145          
 146          
 147          
 148          
 149          
 150          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    714    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     16      28
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
